Microsoft Build May 19-22, 2025 Session: ODFP957 Speakers: Cody De Arkland

Cody De Arkland: Hello, friends. My name is Cody De Arkland and I look after Developer Experience at Sentry. And today, I want to spend a little bit of time talking to you about the workflow that we go through when we're debugging and troubleshooting problems inside of applications. Today, we're going to talk a lot about our GitHub Copilot integration and the tool we built to interact with Copilot. We're also going to show a bunch of different ways that GitHub plays into what we do inside of Sentry. So, really excited to show you all of it. Let's get into it. So to jump in to start off, here I am inside of the application we're going to work with today. So I can go in, I can add a couple things to my Unborked marketplace cart. I'll go in, check out. Everything looks like it's working fine. But we're rolling out a new feature inside of this project. So I want to go into my Sentry toolbar over here and I'm going to come in and I'm going to enable this new "GOODS_PRODUCTQUERY" feature flag. So I turn this on, but when I go in and I refresh the application, suddenly we start having some problems. If I go in and hit "Try Again" a few times, we can watch it have problems with communicating back with the products backend. Now, I'm developing this locally on my workstation, so it's easy for me to jump into my editor and start debugging what's going on. So I'll come into VS Code, and here I am inside of my application. So we can see I've got Sentry in place, so it's initializing. Everything's all good. And I've got Copilot over here on the right hand side. So with the Copilot integration, I can come in, I can do it "@sentry" like I have here. So, "@sentry", and I can go ahead and ask it what tools are available that I can use to interact with. And so again, as I mentioned before, we want to talk about the workflows that people use when they're debugging applications. If something's breaking for me locally, I'm going to jump right into my editor and I'm going to be looking for ways to fix it. And so being able to jump into Copilot and use AI to start interacting with Sentry is a good way for me to start pulling those issues in and debug them right inside of my code. So I'm going to come in and I'm going to ask "what tools do you have available". And this is going to reach out to both the Copilot infrastructure and Sentry to let me know what it can actually do. And so our tool inside of Copilot lets you interact with issues. So you can pull down issues inside of individual projects. You can get details about those issues, understand the different transactions that are behind those issues, and then you can start interacting with opening up new issues on GitHub that are linked to your issues inside of Sentry, but then also resolve them out when things are fixed. So you get this entire workflow of being able to use Copilot to go and interact and solve problems. So in this case, I'm going to say "list all issues in the unborked project". Again, this is going to reach out to Sentry and Sentry is going to come back with all of the issues that have recently been opened inside of that project. And so we can see a few different ones that have happened in here. And this first

one relates back to the issue that we were having inside of the demo application. So I'm going to come in and I'm going to tell it, "tell me more about issue 1". And this is going to give me more detailed information about what's going wrong inside of that issue, so we can understand a little bit more about what's happening. You get a good summary out of it. So the error occurred inside of the API file when it's trying to get the product. It's trying to call this backend product-query API and it's failing to fetch the goods. So it gives us also a possible cause. Now I can take all of this, there's a lot of good information here, and one way to go about this is to copy all of this down and I can drop it into Copilot and start working directly inside of my code base and interacting back and forth to solve it. So we can be using Copilot in this way to pull in good context from Sentry and all the normal things that we capture when things go wrong inside of an application right into my code base, start working on it there. Another way we can go about this is diving into Sentry directly too, and so we link these out to Sentry directly. So it's easy to jump from your IDE experience right into Sentry to start debugging. So I'm going to go in and open this up. And this is going to drop me right into that issue view inside of Sentry. And so in here I can start to dive in and understand a little bit more about what's happening inside of this issue. So, up top we can see the error message that it failed to fetch products from the endpoint. I can come in here and I can see that feature flag change that was done, and when it last happened, and the events that came up after it. And I can come into Seer, our AI agent, to start to debug what's going wrong with this issue also. So, one way to do this, again, is inside of the IDE directly with Copilot there. But once I'm inside of Sentry I can start pulling all this context in and feed it into our system, also for debugging. So I can come in, hit this "Find Root Cause" and "Start Autofix". And what it's going to do is it's going to start collecting all of that same information and feed it into Seer to start debugging this problem for me. So it's going to pull things like our traces, the spans, to understand what communication flow looks like. It's going to use our GitHub integration to tie in and look at your repo and understand from a code standpoint what were the last commits you made, the last most recent file changes that happened. All of that stuff is going to get pulled in. It's going to pull in stack traces so it understands exactly where in your code this problem is actually happening at, and use that to help debug this problem. So what Autofix will do is go and create effectively a root cause around what's happening here. And so it's going to look through all of that, figure out that root cause, and then it's going to go through and propose out solutions for us. And so that's really powerful, because what it can do then is actually go and create a PR to actually fix this problem. What I love about Seer and what we're doing inside of Autofix is, one, it gives you that root cause to understand what's going on. Two, it's interactive. So I can come in here and I could click on any of the different root cause findings that it's finding and I can interact with it directly. So I can click on this and I could come in and say -- oops, I backed up, that was a mistake. I click on this and I could, say, type into there and say this one's not valid, right? It happened too fast and solved the problem really quick. Here we go. I can go and click on this one, I come and say, "This issue isn't valid - remove", and it'll take that into the context of its AI interaction and use that as part of the cleanup. And so it's really useful to be able to go back and forth and try to solve problems from. We also provide out some

resources as part of this to let you know things that could help fix this in the future, so being able to dig into it. So I like the guidance here of trying to get you set up to actually solve problems in the future also. In this case, it's going out and already starting to build out the solution for it. So I'm going to let this run in the background while we explore a few other things. So if that's running, we can already see that feature flag changed and understand a little bit more about the details here. I can see the stack trace for this change, right? So exactly where inside of the code this problem is happening. I can see the breadcrumbs that were happening throughout the interaction. So every stage that somebody was interacting with on this. I can even come in and see the traces and spans for the communication here. So in this case, I can see when the page loaded and I can see all the way to that backend query, all the way down to the individual database query that was actually powering that interaction and where it was failing. And so this is a Neon database in Postgres, and I can see it's trying to query here and it's having an error when it makes that query. And so this is good debugging information for me to help get to a root cause of what's broken. So I'll head back up into that issue. And we'll jump back into Seer to see how things are going. So it's still looking at the solution, it's coming up with a couple of different options, and we can actually watch its thought process as it goes through and figures out which one is the best solution for this problem. So if we go through and look, we see one is disabling the feature flag for the GOODS_PRODUCTQUERY. I don't really want to do that, because ultimately I want to be able to test this out and make sure it's working right. It is talking about creating a missing 'goods' table in the database. Maybe, maybe not. I don't necessarily want to create a new database table entirely. It seems like this is just wrong based on the query. But we can also modify the server code to use the right table, which is the solution that I ultimately wanted to go with, and then implement proper feature transitions. So it's going through and figuring out the right one to pick from on this and it's about to actually propose this out. And we can see it's finding right now that it should actually change this to the product table instead, which is ultimately the solution that I wanted out of it. So Autofix has found a solution and the solution it found is to correct the actual endpoint to talk to the right database instead. So in this case it wants to modify the SQL query in the productQuery file to select the product table instead. I can go and tell this to go and code it up and it's going to start actually building the code out for this that I could take in and drop into my application directly. Meanwhile, I could come in also and I could "Copy solution as Markdown", drop back into my editor, and I could use Copilot in this case to implement that change. So if I didn't want to have Autofix go and pull that PR against GitHub and make that change directly, I could take this, drop it into Copilot, and use it here. So if I clear out this and drop this in, we can see the entire description of what it wants to do to actually fix it. So like I said before, modify the SQL query and productQuery.ts to select from the right table. And then it goes through and talks about updating the log messages to reflect the right name and also go through and clean up any sort of the spans or error catches along the way to make sure they're set up right. So again, I could take this, drop this in, and since it's all running locally anyways and I'm working on it here, just have AI go and make these changes for me. The thing about Autofix and Seer is that we ultimately just want to be able to fix

broken code and we want the workflow to represent that. So sometimes you might just want to take the outputs from that and run that against an LLM, or it gets an interaction inside of Copilot that you want to run instead of having Autofix do it for you. Other times, you might want to have it go ahead and draft that PR, drop it in GitHub, so you can go and approve it. Really, the workflow is up to you, and we want to have answers to either one of those workflows. So I'll jump back into my Sentry instance. We can see if the code changes are ready to go. If I go "Show More", we can see all of the changes that it's suggesting along the way. It wants to update some of the information that's inside of the span. We can see some of those log updates in here. We can see the call being updated to the right database instead. And so I'm generally happy with this. I'm going to go ahead and tell it to draft this PR. And this is going to open up a PR against, again, the GitHub repository that's already linked to my project. And so we can see the workflow here totally checks out. We had a problem inside of our application. We went in and pulled down issues and understand what's actually broken using the Copilot integration. We use that to jump into Sentry and start digging into more about the problem. We had Sentry's context feed into Seer to help us debug and figure out what the root cause is and propose a solution out. We opened up that PR against GitHub. And now when I go in and view this PR, we can see the changes right here. I can jump into the "Files changed", and we see all the changes that it's suggesting to make automatically. So I didn't have to go in and build this out myself, I was able to have the system go ahead and build it out for me. As we wrap up, the thing I want to focus the most on is that Sentry cares a lot about making sure that the developer workflow of debugging a problem, figuring out how it broke, who was impacted, and giving solutions is what matters the most to us. We want to make sure that when your application breaks, you have a bunch of different ways to go in and solve this, whether it's taking the context from Sentry and dropping it into Copilot and having it go and interact with your application directly and fix the code there, or fix it directly in Sentry using Seer and Autofix. With the GitHub Copilot integration, we can pull all that context directly in using just a simple chat interface and tagging Sentry and asking for more information. And we can jump between a bunch of different issues, different projects, and right back into Sentry as we see fit. We'd love to help you get started with all of this. If you have any questions, feel free to reach out. We'd love to hear from you. Talk soon.

EN