Microsoft Build May 19-22, 2025 Session: BRK123 Speakers: Beth Massi, David Ortinau, Gerald Versluis, Maddy, Uma Maheswari Chandrabose, Uma Maheswari Chandrabose

David Ortinau: Hello, hello, hello. How is everybody doing? Welcome. ( applause) Welcome to Thursday morning. Did you all go to the party last night? Good times. I didn't. I stayed in. I think it's the strategy of the leadership. Keep us busy until the very last day so we can't go crazy. ( laughter) Thank you very much for making the time to come here. My name is David Ortinau, I am Product Manager on.NET MAUI and we also have some other guests with us today. We've got Beth Massi right here, Product Manager on the team.

[ Applause ]

We've got Gerald Versluis. Versluis. ( applause) Mr Like-and-subscribe, and we have a special guest coming up and we'll give her an introduction here in just a minute. We're here to talk about AI-infused mobile and desktop apps. If you're here for the Al-infused session that is not today, we're not infusing apps with Al ( laughter) but AI for sure. If you're not here for jokes you are absolutely in the wrong place. We are here to have fun, we love what we do and we hope you do to, so let's get into it. Alright, so how are we thinking about this, generally speaking? We're thinking building intelligent apps. What's an intelligent app? It is that app where you're bringing AI into the app and you're doing something unexpected. You're doing something that requires some logic. It's not deterministic, it depends on all kinds of other factors and so we think of building apps in this way intelligently. Let's not be dumb about it, let's work smarter. They've told us that since kindergarten, it's finally gotten to our hearts and we're doing it in our mobile development. We break that really into two things. It's agentic apps, that's the actual app building, and that's primarily what I will be talking about today, and on the other side of it we've got the agentic DevOps. The term DevOps to me always meant just the CICD thing, that thing up in Azure or GitHub Actions that I have to call Sweeky for because I don't know how any of it works. I had Pierce Bogan contact me recently, he was working on a demo for VS Code. He says, "How do I get this build to work on GitHub?" and I said, "Hey, man, you call Sweeky," ( laughter) so he did and he got it fixed. We're going to talk more about what do we mean by DevOps here, it's going to be bringing Copilot, bringing AI functionality into your Visual Studio experiences, things you're probably already enjoying today but we're going to show you some juicy bits as well. Gerald will be up here for that and Beth will be up here as well. What I want to get started talking about today is this disruption that we're starting to undergo and we'll be seeing more and more of. This quote here from Jakob Nielsen, everybody knows who Jakob Nielsen is?

He's been telling us how to build actual good user experiences since the dawn of the web. I remember having his very first book way back in the day. He's still at it, and this is actually from several years ago where he made this comment about this really being a new user interface paradigm. I've been exploring putting AI into my mobile apps, my MAUI apps and thinking and rethinking how it can reshape the experience of my apps better for the users, and many times the user is me but I'm also thinking about you. If you've got a field service app and you've got a bunch of data entry forms, what is it that AI could potentially do for you to help your users be more effective in the moment? That's a lot of the thinking that we're doing and where I'm going with this. I think that focusing on what you want the computer do, not how to do it, you're not having to provide instructions as a user to the app to do something, you just express your intention and it can do it because, of course, AI can do a little thinking. Sometimes it's a little squirrelly, but then again you're here listening to me and so you have tolerance for squirrelly, right? Squirrelly. Let's get into an AI-infused app. I am going to play it dangerous ( applause) and I am going to live demo an app from my phone because the wonderful gentleman in the back hooked up my phone and so I'm going to switch over to one. Woohoo, right off the phone. James knows all about this. I'm like, "We used to be able to do this, can we still do this?" Couple of things. Let's start off with a little context set. If you have used the.NET 9 template that we ship you know that you can use the sample content now. In Visual Studio you check the sample content box when you're creating a new project, or if you're doing it from the command line it's a -sc, and when you do that you get this gorgeous app. Gorgeous, right? It's a to do app, but it's a little bit more than a to do app. It's got SQLite behind the scenes, it's got projects so you can go into a project, you can see all the tasks that are associated with that project, which I have no balance in my life and so there are no tasks associated to it. I am learning to speak another language so I do have a few tasks there, etc. Of course, it does the basic things, light and dark mode, and I think light and dark mode is a very simplistic example of the direction in which we can go with this, because why? Because your phone now knows the time of the day, it has sensors to know the ambient light in the room and it can choose for you whether to be in light and dark mode. How many of you have your phones set up and you allow it to control your light and dark life. Quite a few. How many of you then would say, lifting your left hands, that you do not let it control your light and dark life, you control it? Alright, quite a few. It's a personal preference. Wouldn't it be great if, in the same way you can tell the phone your personal preference for light and dark mode, now it can learn your preferences for all kinds of other things and do amazing things for you. It's a very straightforward app, really there's only one way to do it, you have data entry. Now I know why I was in light mode, because all that. It's an old version. It's an old build, folks, these are not bugs ( laughter). It's data entry. I've got to be able to add a task, like fix the dark mode, and I don't have Copilot agent, I can't assign it to Copilot agent in the app, unfortunately, but that's coming. Surely it's coming. I'm going to call this a fitness task and then I can save it. That's the basic app. We're all used to this, this is the kind of app we've been building forever. I have a couple widgets on the screen here because I wanted to accentuate the fact that, of course, my phone, and by virtue of my phone potentially my app, knows more about me if I want to

grant that access. My calendar, it knows where I am, where I'm supposed to be, anyway, and it knows where I'm supposed to be going, I have a flight tomorrow. It knows that I have a session right now, etc. I have a map, it knows where I am by location, so I've got GPS, and then it has all kinds of other information if I want to grant it. What would it look like if I started to bring AI into the scenario here? In order to do this, I have plussed up this app with telepathy. It's a little mind-reading, a little read your mind, it'll know what you're thinking. I've enabled location services here, I've added, it's a bring your own key situation, folks, so security is important, don't be putting your keys in your code. I didn't want to pop up a web server, Beth and Gerald will show us web things later. I just wanted to stick with the app, I can always put up a web server later, so I've got bring your own key going on here. Google Places key, which apparently I forgot to input but that's alright, and then I've got my calendar, so I've connected to my calendars, therefore the app knows all about it. I'd just like to be a little bit extra helpful and provide it with a little bit more information. I drink coffee, mostly Americanos, that's the most important thing that it really should know. I'm 50, I am a grandfather, I didn't tell it that but I'm telling you ( laughter). Now my app knows all of that and so now, let me see, if I go away and come back to that screen, now at the top you see that it's applying its logic, it's doing some futuristic intelligence on my tasks and let's see what it comes back with. This is the squirrelly part, I have no idea what it's thinking of. It says that I should be celebrating the successful delivery of a presentation ( cheers). Crazy. One of the principles that we're going to talk about is, "That's fantastic, but why did it prioritize that?" What if I'm like, "Didn't make sense to me"? Having some way to see that is definitely important, so it says while this task occurs post-presentation it's important for your overall experience today for a potentially stressful event. Do I look stressed? I'm having a great time. Similarly, I can prioritize things here. Now it's taken what used to be just a really long list of tasks and it's said, "What are the most important things for you to be doing based on what I know about you? I know your location, you're in Seattle. I know that you've got a calendar event that says that you're supposed to be working on a presentation and giving it today between 10:00 and 11:00." It knows that I work at Microsoft on .NET, because I told it that, and so now it's giving me really, really good stuff. I think about my health apps and it knows all kinds of biometric information about me. Wouldn't it be great if it could be providing me with better insights? Apps are starting to do that today, and usually it just tells me, "You ran faster this week than last week." Yes, I know. Could you do more? I've got a lot of things. There are some things that didn't get prioritized, so here's one of my tasks, it's the ultimate Friday adventure, Maddy. It says I should wake up at 07:00 and be fresh. I should go downstairs, have a bowl of cereal, check the time. Do you recognize this, Maddy? Do you know this?

Maddy: Yes.

David Ortinau: Yes, it's one of your favorite songs? And so, I'm very thankful that it did not prioritize that over my Build presentation. Pretty cool. Alright, but what else can this thing do? Let's see here. Let's take a risk. Are we about risk-taking today? Now, instead of, you

see my little expanding thing there? I just want to point out that I coded none of that, that was all Mr, my favorite friend, Claude 3.7. Did an amazing job. Animated that puppy and everything. Now I've got a camera, and so it knows I've got a camera, I can do camera things, I now have vision, so that's a whole different modality that I can use. I've got a microphone, so if I choose to speak to my app, I can now do microphone. I've got a keyboard, of course, which I had before. Let's try the microphone thing. So, I'm in downtown Seattle, and after this session I really need a good cup of coffee or maybe a beer, probably a beer. I need to get an invite to a local brewery. Not an invite, what do you call those things? Reservation to a local brewery. Can I get that set up? Now it's not going to set it up for me, but it's going to transcribe that using the Whispersync transcription and it'll at least -- I said a lot of nonsense in there, right? It filtered that out and got down to the brass tacks of the thing that I needed, which was to get a reservation at a local brewery. That's my task, it's a brewery visit. Not cool? ( applause) Yeah, cool. I know you've seen a lot of really cool demos this week. Pretend like you saw none of that and this is the best thing you've seen all week, okay? That occurred to me as I was getting to -- alright, I could do a whiskey tour if you prefer. I don't know, what's your thing? I drink a lot more coffee these days. So, I could save that. Let's do one more thing and then I will move on, because I'm actually saving myself so many slides right now, Beth, by live demoing. She's like, "Dave, you're leaving me no time." I'm going to add a project and let's go ahead and do this one as "tour the downtown Seattle area", because I'm here. Now, you see that it's a -- I colored the box with the gradient on the outside. This is actually me using a Syncfusion control, the text input layout, one of my favorite controls, and they don't support gradients but they're going to. Going to support the gradient border. So, what do I do? I just extend that control and then Claude and I go to town and we just replace the border with our own border. Pretty slick. So I'm really happy with how that turned out but, of course, because it's got the gradient, you know it's AI-enabled, that's like the universal symbol, and so once I get off of here, you see that it's going to think about it and it's going to see what it can do to generate some tasks. Six tasks recommended. So, I don't know, set up a morning meeting? Set up a morning meeting with who? I don't know. Visit a local coffee shop, cool, I could do that, it knows I like to drink coffee. That's a good suggestion for me, I feel good about that. For you? Maybe that's not what you want to do first. Collaborate with somebody, research the latest trends, plan a team-building exercise because you can't go to a brewery or do anything like that alone, it needs to be team. It's unpredictable, you don't know exactly what you're always going to get but that's one of the principles of building AI apps. I do have one other modality, which is the camera, but I'm going to save that for the video because it'll be faster and I don't want to run out of time. Cool? AI-infused apps.

[ Applause ]

So, let's go to this, not that one. This one? Not that one. This one. This is the camera one, so I used our media picker and I took a photo of a recipe for banana bread, but in the context I said, "I don't want the recipe, I want a shopping list so that I can go make the recipe." This

is, of course, something that AI could do a little faster than perhaps I could and translate that into a to-do task, to-do list, a shopping list for me. You can start to imagine, two years ago I sat in an executive briefing with a customer and I saw the Nuance demo and they were doing some amazing AI things in the medical industry and it was stuff that nobody else could do. Sitting on my couch I'm doing these things now. You can do these things so easily, and if you take nothing else away from this session, that's what it is. The stuff is at your fingertips and MAUI is an awesome candidate for you to be able to do those things. I showed you that demo. There are really three different ways that you can think about how this is changing user experience. It's personalization, it can know, as long as you give it access, a whole lot more about the user, and it's for the user to opt in to it. How do they want to work with your app? Right now you design an app, you put that app out there to the customer and it really works one way for everybody. Is that really the best way for it to work for each individual? Some people are going to struggle more with it than others. Some people are in situations where they can verbalize what it is they want to do and they can use the voice dictation-type stuff, others are not, but they're using the same app. Can they use it in different modalities? There's some personalization for purpose, there's some personalization for preference and there's just a lot more of it that we can do now because the same app can now adapt on the fly in real-time the UI that I showed you where it provided me with prioritized tasks. If I didn't have AI turned on and enabled in that app, I wouldn't get that. I would get the basic experience. It's on the fly giving me a whole different UI that nobody else is seeing and only I am seeing. Context awareness, pretty self-explanatory, it knows where I am, it can have calendar information, it can have location information. We all remember the Windows Phone feature where you'd give it a to-do but you'd tell it the location that you should to-do it at and when you got close to that location it'd be like, "You're actually close to that location, maybe you should go do that thing now," like visit your parents. Nobody? No? Yes. Just for some of us, it's okay, we get it. It's not a new idea, but now it's super easy for all of us to do. Multi-modal interactions, that's the can I do voice, can I do vision, can I do all those other things that we can imagine? I did a bunch of research. I'm like, "I'm seeing this stuff happen, some apps I see they're starting to do work in this space," what is the research out there saying? The peer review, the really good research. Not necessarily just the blogs but the, what do we call them? Eggheads? The really, really smart people that we should be learning from? They really came up with six design principles in this particular paper that I cite at the bottom, which is you want to design responsibly, and this is something that we at Microsoft believe very strongly and I as an individual would believe strongly in, is that we need to make sure we're solving real problems. It's not just for flash in the pan stuff. That we are going to minimize harms. When it comes to AI, I think we're all quite aware that if you let people start utilizing that chat window in a very unhealthy way, you've basically enabled that very unhealthy outcome. We want to be able to minimize that. Create agency for the user, but don't let them harm themselves. Many other things. Be thinking, design responsibly. Design for mental models. Mental models is perhaps not something that we as developers think a lot about but certainly UX professionals think a lot about this and we can too. What is the task in the

person's mind and how do they think about that task when they're trying to do it? I'm showing you a pretty trivial example with the to-do app, but in my mind I'm also thinking about your sales pipeline app or your sales tracking, your inventory app, your point-of-sale app, your field service app and all those sorts of things. When you know that different users are going to use things in different ways you can design it to be flexible. I remember when I was working in healthcare claims administration software, so you get a health claim, that's great, you love telling mom and dad that. They're like, "We're so proud of you for working in healthcare claims administration. Do you prefer dental or vision?" Which would have been funny in my family because my dad's a dentist. I remember, because this is back in the early 2000s so we weren't all Teamsing and looking at everybody's screens. The support folks were like, "We don't really understand why this user can't seem to get the claim to go in," and so they were just doing phone calls, just phone calls, "Tell me what you're doing, tell me what you're doing." When finally I was like, "Let's open a Webex and let's look at their screen and have them show us what they're doing," the thing that became very clear to me is this claims input person and this data entry person do it completely differently and they think about it differently but they're all using the same software. This business over has one need and this business over here has this different need and they're using it slightly differently but it's the same software. The more you try to deal with that the more problematic it is, so this is a great solution how we should be thinking more about adopting the ability to handle multiple mental models in the same app. Designing for appropriate trust and reliance, like I said, why did you prioritize that thing for me? I want to be able to see and understand your thinking behind it. Same reason with GitHub Copilot agent and things like that where you can see all the reasoning behind the scenes. Are you going to read that all the time? Absolutely not. Most of the time you're just going to accept it and see if it works, but there are times when you need to be able to see it, and it's important as the developers of products and when we're putting AI into our products that we think to ourselves, "Do I need to reveal this to the user? Is there something that they need to be able to oversee in this thing?" Then there are three more. Design for generative variability. Like I said, a little squirrelly sometimes. Don't know what the AI is going to come up with. You prompt it as best you can, you ground it as best you can, you provide it all the context as best you can but there are going to be times when it's not deterministic, it's just going to come up with different stuff. Making sure that you have put the guardrails but also the levers in there to make sure that the user can guide it. It's a collaborative thing, and so you want to design for collaboration between the AI and the user, which is the co-creation part. Make sure that it's not just a one-way street, that you have to almost retrain users to say, "Yes, we're giving you more power and more features and it's more catered to you, but now you also have some responsibility to curate that experience to make it as effective as possible for you." Then designing for imperfection, make uncertainty visible, etc. In addition to resources like this, Microsoft, of course, and our Microsoft research group has our own Microsoft AI principles, and you'll see a lot of similarity in these things as well as some other things that we want to make sure we're all thinking about, especially around privacy and security. Don't be putting OpenAI keys into your source code, it is going to get found. Bring

your own key, deal with it and encrypt it and do all the things. If at all possible, make sure you're doing it on the server so that it's back and hidden. Things like that. Mitigation layers. Now that you're working in this stuff, Microsoft, we have a lot of resources for you to help guide you. The hacks toolkit, the system message framework, information about how you can provide safety with content in your apps. We also, of course, have the AI foundry model catalog, so are you picking the right model for the use case and all those sorts of things is super important. In this particular app I actually have, I think, three different models that I'm using to do different things. Some of them are better at voice, some of them are better at vision and some of them are just great general purpose for the chat stuff. Make sure you're using the right thing. The great news is, of course, you can prototype with one, find those limitations and then start adopting other things. Tons of resources for getting started, we'll show the links at the end as well. If you want to take a screenshot of that really it's the aka.ms at the bottom that is going to get you to everything that you need. As said, at the end we'll also share a bunch of resources for you that you can use. MAUI is infusion-ready. I think we all know what MAUI is, it's multi-platform app UI, it's MacOS, iOS, Android and Windows. It is native UI. Of course, you can use UI toolkits that are doing drawn UI as well, and you can do hybrid. If anybody was in the hybrid labs that we had on Monday and Wednesday, they were amazing. Beth did an amazing job, James did an amazing job, I kind of didn't really help but Gerald did more help than I did ( laughter). I was like, "Do you need me?" This is what MAUI is, and so it is primed and ready for doing AI-infused apps, as you saw. If I can build it you can build it. Just a quick update on how MAUI is doing health-wise, because when Rachel, our coworker, brought these numbers up to me, because we refreshed this from the past, these numbers are all better than we had seen in the past. Healthy growth year over year 17% in people coming to MAUI, getting tons of wonderful positive feedback not just from those of you here that are our fans at Build but from customers that we talk to all the time. The significant volume of PRs being created, issues being resolved is amazing. Especially what I love to see is this negative 26% of issues created. More people are using the product than ever before, but there are fewer bugs being reported. That is a really good indicator. You could say, "That means that you've just already logged all the bugs." (l aughter) I promise you there's more ( laughter). 4.7 times the number of PRs created year over year, or for that four-month period of time. So much amazing work is happening in the ecosystem, we're going to hear a little bit more about that in a minute. 1.4x times the number of PRs merged, so you can see that we've got a lot of PRs being created, not a lot being merged. You better believe we're going to be using some GitHub Copilot agent, see if we can't get that done. You want to start reviewing some PRs?

Speaker 1: No.

David Ortinau: No? ( laughter). Come on. I wouldn't trust you either ( laughter). It's AI-ready. One solution, everything you need, whether it's the context awareness stuff, we've got that covered, adaptive UI. It's almost like just telling you how MAUI works. We've been adaptive forever. Now you can do some really cool things. We're working more on the

theme stuff, we're adding more functionality there but really you need flexible UI that you can, at real time, at run time, have AI manipulate and show the right things, you're in good stead. Some of these things, I will be honest, I've been honest the whole time, I hate it when I do that. When I did show you the video of the photo thing with the bread, I did cut out a pretty significant lag because it's got to send that image up to OpenAI, wait for it to process it and come back. That's a long time. What can you do in that scenario? On this screen, ONNX, that's the ability for you to run those models, purpose-built, hopefully small models on your device with that runtime. Cloud is not a great solution for that, but you can do it on-device and the code for it is quite straightforward. I'm not going to go through all of these but we're going to make the source code available. I just want to show you generally how little code it is to get up and running with Microsoft.Extensions.AI. Provide it the API key, tell it the model you want to use and you've got a client you can start sending stuff to. You want to do MCP, you want to do tool calling? I'm actually doing tool calling here where I've got a location tool that I and my best friend, Claude, put together. That's not funny anymore? (l aughter). It does a great job at providing me good, local context using, in this case, the Google Places API. Here's what my tool looks like. You basically just give it a description so that AI knows what this tool does and it can call it for you. Of course, I omitted the implementation because it's just calling Google Places API. I can bring it all together in my models where, for example, with the prioritization, and this is actually the really cool bit, I don't know if you can see my cursor there, but this is one of the things I love about the Microsoft.Extensions.AI. I don't have to do a bunch of JSON things telling it, "Give me the JSON in this format." In the early days you really had to be real specific in your prompts. Now I can give it my model and say, "The response you should give me should be this." I can also provide descriptions in it so it knows exactly the content that I'm expecting and I don't have a bunch of JSON de-serialization issues to have to worry about. To do the audio stuff, Plugin.MAUI.Audio. Gerald, are you familiar with this? You may have had something to do with it, you merged PRs from other, smarter people. We've got plugins for this stuff that are super good, really easy to use, cross-platform so I don't have to know how Mac, Windows, iOS and Android deal with these things differently. I can just use this one plugin and it works across all of them. MediaPicker, that's baked in to MAUI so if I want to be taking photos or I just want to be picking photos I have that and, as a matter of fact, some wonderful, good, loving work went into the MediaPicker to fix some long-standing issues in I think just the last release, right? Project dependencies. Look how little I needed to make this thing happen. Really didn't need a whole lot, but the one thing I do want to turn attention to now is how impactful the Syncfusion toolkit.NET MAUI has been. They've been a great partner to us this past almost year and they have been releasing controls after controls, open sourcing them. It has been amazing and they're gorgeous, so you can see how many of them. Did you think my app looked okay? Did it look alright? Come on, give me a little ego boost.

[ Applause ]

So, with that, at this time I'd like to invite Uma on stage from Syncfusion and she's going to give us a quick little update on the partnership and how things are going with Syncfusion.

[ Applause ]

Thanks, Uma.

Uma Maheswari Chandrabose: Thank you. Thank you, there. Hi, everyone. Thank you, David, for having me here in between your breakout session. Hi, everyone.

Speaker 2: Hi.

Uma Maheswari Chandrabose: Hi. It's really great to be here. Myself, sorry, before that let me, I'm not going to take much time so just a couple of minutes. I'm going to talk about how Syncfusion and Microsoft are working together to empower developers in developing the cross-platform applications. About myself, I'm Uma Maheswari and I'm working for Syncfusion for the last 12-plus years. I have started my career as a software developer and involving myself in the UI development for the scheduling kind of components and other navigation components like tabs, toolbar kind of things. Now I have been overseeing the GH, I mean the growth hacking part of the Essential Studio product. Now, about Syncfusion. What we do is we are offering the UI components for enterprise application development. Whatever any applications that you want developed, say, for example, the expense tracker, or I'm just giving you the example, maybe the fitness tracker app or any kind of applications that you build, you need to have some UI components to build. Say, for example, the data grid, chats, scheduler. All these components, we are offering it as ready-to-use components so no need to build them from scratch. You readily pick them and you can make use of it and build your applications, either in web, mobile or desktop. We do offer 1,900-plus UI controls across different frameworks like Blazor,.NET MAUI, Angular, React and so and so. You can actually have a look at our offerings in our website. The main thing is you don't need to build everything from scratch. That's one thing, and apart from the UI components we also do offer the document processing libraries like for handling the file formats kind of things like PDF, Word, PPT and Excel. In addition to that we also offer the enterprise solutions like BoldSign and BoldDesk, which is something like the e-signature software and the help desk software. That's something about the outlined explanation about what we do. Let me talk about how Syncfusion is collaborating with Microsoft for the developer company and how we are actually growing alongside the .NET ecosystem thanks to Microsoft for collaborating with us ( applause). We feel so proud and honored to work very closely with Microsoft in advancing the.NET MAUI framework, which actually happened in the last year. We started contributing to the developer community in two ways. First we started providing the Syncfusion toolkit for.NET MAUI, through which we are actually providing the free open-source controls for the cross-platform application development. Currently we are actually offering 29 controls. We recently released the new set of controls in the last week, so there are around 29 UI controls we are offering for the

community to build the cross-platform applications. Secondly, we are actually working very closely with the.NET MAUI framework repository, so in such a way fixing the framework-related bugs and we are also viewing the community PRs at the first level before it is being reviewed by the Microsoft team. We also triage the issues on a daily basis. It's been a huge thing. To say it more precisely in numbers, in the last six months alone to the.NET MAUI framework repository we have merged 320-plus PRs and 100-plus were under review. This almost covers 65% of the entire community contributions, which is great, actually. We feel so humbled and proud to give back to the community along with Microsoft.

[ Applause ]

So, this collaboration not only impacts the community but it helps Syncfusion in many ways. As the developers got to work very closer with the.NET MAUI framework source, so we were able to speed up our development time, focusing more on enhancing the quality of the controls and compatibility of those controls. We were also able to get to know more about the community requirements directly and their feedback so that we were able to align our product roadmaps accordingly. The main thing is we were able to test our UI controls in prior with the beta versions of the.NET MAUI framework, so no need to worry about compatibility issues before any new release is set. We also see a very huge spike in the adoption of our.NET MAUI toolkit. More and more developers are jumping in and building more cross-platform applications with Syncfusion and.NET MAUI with more confidence. Yes.

[ Applause ]

Now let me walk you through what are the new updates that we made to Syncfusion toolkit for.NET MAUI. We have added six new controls recently in the last week, so the date picker, picker, time picker, datetime picker and two types of progress bars, which are linear as well as circular. In addition to that, we have also ensured all these components are optimized for AOT and trimming, so especially in iOS, so that your apps can stay faster and lightweight. As I said, I'm not going to take much time so I would like to end up with the final note. At Syncfusion, our vision is to simplify the development and make the developers to deliver innovation with ease. For that, we are actually providing the AI-powered components as well as AI-powered solutions as well. If you want to know more about what kind of AI solutions and AI products that we offer, do visit our website, Syncfusion.com, for more details actually. Thank you so much, everybody, for your time, and thank you, David,.NET MAUI team and Microsoft for this great opportunity. Thank you. Thank you, all. :

[ Applause ]

David Ortinau: Thank you very much. It's a partnership that has been extremely rewarding. When we launched .NET MAUI at .NET 6 we had a lot of work ahead of us, and.NET 7 was much the same as 6. 8, our team did heroic things but when we start to look at.NET 9 and now

due to the community stepping up but especially the Syncfusion partnership that we have. It's a long-term thing, we're working very closely together and I love that they have a group called growth hacking because this is something that we're going to be doing more and more here with.NET and especially.NET MAUI, is how can we do more partnering, more close relationships where we're all working together at this ecosystem? This is open-source software and this is not how we've done it in the past, but this is a precedent for how we can really make this a sustainable long-term thing that everybody can have a stake in and feel very, very confident about. I hope that you will join us in that in the coming months and years, and if you are interested in also partnering with us and getting closer to us and collaborating, you should have my email. If you don't, it will be on the last slide. Beth, I saw some Syncfusion controls that I was wondering if you might have an idea how to get them into my native MAUI app but they're web controls.

Beth Massi: I'm glad you asked, David. Thanks, David.

David Ortinau: Mic?

Beth Massi: Am I on?

David Ortinau: You are on, but I can't hear you.

Beth Massi: Hello? More. Hey. I think that was me.

David Ortinau: Yep, there you go.

Beth Massi: Okay. There we go. Cool. My name's Beth. I'm going to talk to you a little bit about.NET MAUI hybrid apps really quickly because Gerald has some stuff to show you too. What are hybrid apps? Real fast. Okay. They're a blend of native and web technology. Instead of using native controls, you're using web UI instead of native UI. That means any kind of HTML, JavaScript, CSS. Access to native hardware, though, you get -- as a hybrid app, you get all the lovely device APIs that you're normally used to right on any native platform features you might need. That might be really sometimes hard to do just in the web development alone. It can mean mobile or desktop apps, or mobile and desktop apps in the case of MAUI, like Electron's desktop, Ionic's mobile, MAUI does it all. This nice thing about this is you can reuse your web UI that you might already have on your websites and get them -- and distribute them through the app stores, for instance. Okay? That might be a way to get more reach. But yeah, most of this is about greater productivity. If you already are building web apps, you can also target devices as well, so that's why you would build them. The difference here between the web UI and the native UI, and by the way, in Maui you can mix and match it all together too, you can have both, but web UI typically, it looks the same across devices, it's controlled by the CSS itself. Whereas on the other hand, native UX is more seamless user experiences for each type of device itself, so it really just depends on the type of application that you're building and how you want it to look and feel. But code reuse, as I mentioned, web UI can be used across the web, so for ultimate scale and reach.

Then it also depends on your skill set. Are your users more -- are your developers more used to web technologies? And are -- is that where their expertise lies? Or on the Microsoft stack, typically for native, you're going to need to know some knowledge of XAML, so just whatever they're familiar with..NET MAUI hybrid apps, you can -- we have two controls in MAUI for two types of apps you might want to infuse into your MAUI app. One is hybrid apps with Blazor. So, we have this control called the Blazor web view, and that allows you to bring all the wonderful things you do with Blazor into MAUI itself, so you get the best of Blazor and the best of MAUI together. We have solution templates, we have a tight inner loop with Copilot and Hot Reload, we have built-in controls, component, validation, auth, all of the stuff that you're used to with Blazor, you get right there in the box. However we also have another control called the hybrid web view so you can bring other JavaScript frameworks into MAUI like Angular, View, React and it provides the interop between JavaScript and C#. You can call C# methods from JavaScript and vice versa, and we're working on some fit and finish work and for.NET 10 preview five, which releases next month, we're going to have new hooks for intercepting web requests and you can do a lot more at the -- on the metal there if you need. So, today, I'm going to show you more along the Blazor lines because, as you mentioned, we have some Syncfusion controls for Blazor as well and I'm going to show those. They're really beautiful. But here's the architecture slide that Dave showed you. On top, there are the controls, the Blazor web view and the hybrid web view siting on top. Whether you're using Blazor or whether you're using any other JavaScript framework, those are the controls you're going to want to use. What I'm going to show you, and if you were in the labs, anybody in the labs, we actually built this from scratch. We built an app that was a MAUI app and a web app and we shared the UI and we basically went through on how we built the UI to go on both sides. What we're going to do is we're going to create a Razor class library, and that has all of your shared UI in it, and then you can easily reuse it on the web and on MAUI. That's their architecture. I'm going to go jump into a demo, which I am number four, I think? Hold on, I've got to log in. Dave talked too long, per usual. You guys can see this? I have a website, and Dave wrote this wonderful app and we have our team all using it but I'm an administrator and I'm the team lead, maybe, or something, or just want to keep tabs on making sure Dave is getting his tasks done, and I'm looking at now a really nice set of charts and a dashboard of all the apps that are out there in the world and what's going on with their tasks. Look at these beautiful controls from Syncfusion. This is all Blazor, these are Blazor controls. What it would be cool if we got this UI as well into the MAUI app itself, so the app that Dave was showing you. Let me jump over to Visual Studio and see how we can actually do that. I have three projects, so the project here was the one Dave was showing you, is the MAUI app. Notice I have this shared Razor class library, and this is actually going to house the page. That's the homepage that you just saw. Then there's the Blazor web app that serves the page, so we also have the web app that's storing data at a SQL database and it has all the data coming from all the mobile apps. It has all of that data on the web, so you'll notice that I have this team data service. It's an interface here that I've injected in, and on this page we're using the Syncfusion controls which, by the way, they have wonderful documentation. It was more of just a copy-paste right into here for me

to get these controls running. On initializing of this page, I'm just calling the data service. What we need to do is on the mobile app, though, it doesn't have all this data so we need to make a call to the web app to get it. If we look at our program CS, this is the web app. You'll notice that I'm exposing some minimal APIs that the MAUI app can call. This is just our team data service, it's just using that identity framework to pull the data from the database. I've exposed those APIs. On the MAUI app you'll notice that the homepage, let me go back here, the page is actually going to just be this Blazor web view control that I mentioned and it's pulling up that shared, this is the shared Razor class library, the shared root, to just display that homepage. That's how you add. You just literally, the whole page is going to be this guy. In the MAUI program CS, this is where we set up all the services that Dave needs to talk to his app and do that stuff he just showed you, but we also added in the data service for the MAUI app. In that data service, the MAUI app makes an HTTP client request to the web API. On the server we're just calling the database directly, but on the MAUI client we're actually just making a call across to get the data. Then, at the end of the day, I've got this running over here. Here's our task-o-matic. I added this little page called admin, and you'll see we've got the admin screen. It looks exactly the same except it's running on WinUI, because this is the Windows app, and I also have the admin screen here on our Android app. It looks exactly the same. It does really nice, responsive design that's basically wonderful designs from the controls from Syncfusion guys. Really great job. That's my little piece. I started running through super fast so I could get back to Gerald, because Gerald is going to come up here and talk about agentic DevOps. Gerald, take it away. :

[ Applause ]

Gerald Versluis: I was worried, can you hear me okay? So, I was -- came out here for nothing because David took his sweet time, but here we are. I can talk for a little bit too. Agentic DevOps, it's funny, we didn't coordinate that but I was going to mention, just like David did a little bit earlier, "DevOps, I always thought about that thing that runs in the cloud." I remember Donovan Brown, who remembers him? He made the definition here from the original DevOps, the union of people, process and technology to do all these things. You think about CI, you think about all that thing. Then at some point you get DevSecOps, you got the security in there which is, of course, still a priority. You don't need to put your keys in there, especially for mobile apps, because you're going to send your literal client app to all kinds of devices so it's relatively easy to grab that off there and read all your keys, so definitely don't do that. Now we're going into a whole new phase, which is the agentic DevOps. While we were preparing this, like I said, I was thinking about the CI, the GitHub stuff, all that, GitHub Actions, and of course, it's all in there. We're going to see that for a little bit, but you can also think of the tooling locally in Visual Studio where it can help you and basically everywhere. You'll see the Copilot icon everywhere. We've seen a lot now of what you can build, but now it's time to see how you can build it. What is the tooling that you can use and what can you use it for? These are all the things that you can think of, and there's much, much more, this is not an exhaustive list. The thing that I really like is

writing tests and documentation so at least you don't have to spend any effort writing documentation that no one will read. You can just ( applause) let Copilot do that. Thank you, thank you. You're very enthusiastic about this too, I can notice. These are all the things, and software development doesn't stop at coding. What I find myself doing a lot is talk to whatever interface I have, whether that's Copilot or ChatGPT directly or whatever, to, "I have this problem, how can I solve this?" More than once, it came up with, "Have you thought about it this way? This would be my implementation." I was like, "That's not something I would have thought of, but that's great." Of course, I use it mostly for coding in Visual Studio Code. It has been forever, that's what I've been using, but now also in Visual Studio directly. 17.14, I think last week or the week before, came out, SGA now has the amazing agent mode so it doesn't just help you with the ideation, chat a little bit whenever you're lonely, whenever you're like, "I'm on my coffee break, but what should I do?" Now you can also actually use it as a peer, as your coworker, which you can say to, "I want to implement this thing and can you please help me with that?" It doesn't just come up with ideas on how to do that, but it will actually also go out and do it for you and not only replace some codes and some windows but also retrigger a build, inspect the output from that and do all these kinds of crazy things. Then, if you complement that with Copilot Vision, David, your app looked amazing, I just wanted to say that. I don't think there as enough applause for that but it was great, it looked amazing. Me, myself, I'm a little bit more of a functional designer. If it works, if it doesn't look great out of the box I'm in trouble, basically. I'm a functional minimalistic designer, but what it can really help you with, at least that's the use case that I find myself with, is you have these sketches or maybe this full design that you got from your designer. You can put that image in there, Copilot Vision, it will look at it and it will print out the XAML in our case. If you're using different stacks that works too, but for.NET MAUI it's probably going to be XAML and it's going to provide that design for you and it will just print out a XAML, run the application and you will have a beautiful-looking design. Then we have the coding agent. This is just a couple things, again, not an exhaustive list, that will help you solving actual issues. We've seen the open issues maybe on the.NET MAUI repo, we're just now going to assign them all to Copilot and it's going to be fixed and we're just going to spend our time over here presenting all the amazing things. This is really amazing. You can just assign your issues to Copilot right now, and in the background it will start running through things, trying to come up with ways to actually solve the issues, print out a whole description, "This is what I've done." It will have comments in there. If you have comments on the Copilot's code it will go out and refine the PR for you. It is really, really amazing stuff. Enough with the slides. Let's see if we can actually look at some of this. For the first things that I wanted to look at I have a little video recorded because it's still AI, you never know what you're going to get back and also it likes to take its sweet time sometimes to actually think about it. Here is this first one. This combines a couple of things. We have Copilot here on the right and it really can say, it went a little bit quickly, but implement the XAML for the attached image, so we're feeding it this image right here with a very simple log-in screen for the application that we've just seen from David, which is beautifully designed, I just want to point it out, and we want to get that log-in screen inside of our application.

We're going to do that prompt in there, we're going to give it the reference to a logo file that's already part of our code base. It's going to think, it's going to do all these things right here, it's going to check a couple of files on my repository and, boom, it's going to come up with a bunch of XAML. Actually, if you came to my demo session yesterday then I've talked about all the amazing design time tools that we have in Visual Studio. You can see the XAML live preview right here. You don't even have to start. If you're a long-time Visual Studio user, that we all are, Visual Studio, woo ( cheers). Thank you. You can see that it's not in debug mode. It's not grayed out, it's not running, so you can do this live preview without entering a debug session. You can just have this live preview, the hot reload, all the changes will come up automatically without actually having to run a debug session right here. This will continue for a little while. We're going to refine this a little bit, we're going to do the next prompt, we want to use the Syncfusion controls in there. You don't even, Beth just mentioned, they have great documentation, you can go look at that. No need for that anymore ( laughter). It's great documentation, thank you. We don't need it, we got Copilot to read it for us, put it in there and we are even more efficient this way. It's not just for design. We can also implement the button to actually navigate to a thing, so that's what we're asking here right now and then it will do that, so business logic, all that kind of stuff, you can do that as well. The next thing I really want to quickly go over this, is this the different one? Yes. This is the other one. To make the really, really cool design, this is the same one, let me go to the next one. There we go. This is a really cool design because chances are if you're working with a designer and you're saying, "Just send me a PNG of the design, that's going to be fine," probably your designer is going to look at you like, "What are you saying to me? No." They're going to use Figma, so what you can do here is also use MCP, you've probably heard about that, that will make your Copilot even better. It can go out to all kinds of different services, so we have this Figma MCP server set up. We feed it with a Figma URL. It will go out to the actual Figma APIs, get the design, get the images from there and it will print out this amazing-looking design right here in our.NET MAUI apps. There are still people who think you cannot build beautiful-looking.NET MAUI apps. Here, in a second, we're going to prove them wrong right here live on stage. Here it comes. It's printing out the XAML, yes, building up the excitement. It's taking too long. There we go. Yes, so we have this beautiful-looking design coming from Figma right here in our.NET MAUI app with all the XAML. I've borrowed David's best friend Claude to do this a little bit. Cool. The other thing that we love that also starts with an A is.NET Aspire, right? ( cheers) I would have worn the shirt if I got one, but you know ( laughter). Maddy are not as good as friends as I thought we were, but it's fine. It's fine..NET Aspire, I was on a trip late last year with Jeff Fritz, big.NET Aspire fan, and he was talking over and over and over about Aspire and I was like, "It sucks that we don't have this for.NET MAUI." We have all kinds of use cases that we can also apply to.NET MAUI. Definitely not all of them, but there are definitely a couple of cool things that we can do with Aspire together with MAUI as well. Wouldn't it be cool if we have all of that? Who does not know what Aspire is? This is for you. Aspire is the whole thing, let me just show you. I don't have too long, I'm just going to show you. Let me switch over to number three right here. I got the same set-up as Beth here, so like the set-up with a couple of projects but I added

more. We have our share project, the share project is right here. Then we have our.NET MAUI app and then we have our website right here. Then, in a version of Visual Studio that is yet to come, I've already seen it but I don't have it right here, you will have the context option of, say, "Enlist my MAUI app in this Aspire orchestration." That's going to come. It's a little bit of manual work if you want to use it today. Then when you do that you get this cool app host right here, which is like your bootstrapper. This is going to be, again, for one person right there, I'm just going to call you out, your multi-project start-up thing on steroids. Typically what you would do is say, "Set multiple start-up projects." That's what Aspire does and a lot more, so you will get that all in code. You will get a code representation of your whole landscape in code. You'll have that app host, you can see it's set as the start-up project because it's bold, and then here in the program CS, this is a very simple one, there are much more extensive samples out there, but you will have, "Create app builder." We know that pattern already from a variety of.NET projects. Then we have the web API. It's called a web API, it's actually like our Blazor one right here. Then, now, I can also add my MAUI app, and you can say, "With reference to my web API." You can put up your whole landscape here, and then in our tooling we already got prepared, like, "You're going to run multiple projects now." It starts with an HTTPS one because that's our web project, but now you can also go in here, and if you've worked with MAUI before you know that you need to choose which platform you want to target. You can just do that, get that in there, and then you want to define your defaults for your MAUI app as well, like open telemetry, the service discovery. You want to hook that all up, so we got these two other projects here, one for the web part of it, so the website Beth chose, and then our MAUI service default, which is the one for the.NET MAUI app. This is just a coproject that you add. You can tweak that to your needs. We're just providing the defaults which we think that make sense to you. If you want to not use certain things, if you will need to change the values here, totally up to you, we just set up the defaults for you. This is very similar to the default Aspire project that we've got right here, but with a couple of MAUI things in there. You just hook that up inside of your MAUI app, and then when you start running that it will pop all these things up, there will be a little window to serve up our web part right here, the Aspire dashboard, obviously, but it's also going to start up our MAUI app. In this case I chose the Windows one, but also works for the Android emulator, that should come up too. The iOS remote simulator, I think you saw that working. That should just work all out of the box. It shows up here inside of our Aspire dashboard, so we got that all running. Of course, we don't have a URL to go to here but it's all right here, and then if I go to here I go to the web application that Beth just showed, takes a little bit of time to load, there we go, but here we go. I don't have tasks. There we are. Exact same thing. Just running right here, and we have all these things and my Windows app is coming up too with, again, the same kind of thing. We have our web part right here, the app being a little bit slow for some reason, but you can also see this immediately shows the value. We have this error log right here, and when I click into here I can see GetResponseAsync failed. Let's see what that's all about. I think I do not have insufficient quota, so I'm not on a premier tier of ChatGPT, I think, I don't know. It's going out to whatever service, OpenAPI, and I don't have the right thing, but you can

immediately see this is useful. This would have been eaten up somewhere in logs that I had to inspect, blah, blah, blah. Now it's right here in this dashboard and it will just immediately show me this red bubble of, "This is something that's wrong." I immediately installed 9.3, which also brings Copilot to the Aspire dashboard, so I don't even have to look at this error, I don't even have to open it. I can just say, "What's going on?" and it starts thinking and it will tell me in a human-readable form, "This is going on, it's happening there too, this is what you might want to do and your recommendations." I just need an MCP in here to actually refresh the API ( applause). All kinds of other useful stuff in here. You will get the MAUI things in here too. This is not just working for your HTTP calls and that kind of stuff, but also for other things, so log messages coming out of your MAUI app. This is actually coming from the MAUI SDK, so this is on us, probably. Actually this is on David because it's his source code. Transparent cannot be converted? No, that's weird, what are you doing? You will get all these warnings, and even if you do ILogger, the log error or whatever in your own code, that will show up here too. We're thinking about all kinds of other use cases to hook up open telemetry to detect memory leaks and that kind of stuff, so we're hoping in the future to hook that all up in here as well. Traces for the HTTP calls, everything that you expect from your Aspire things will work, metrics for your MAUI just as well. That's what we all got going for you here. I think, David, you've got about one minute, one minute 20 seconds. I did my best to close us out.

David Ortinau: Did you make it? Did you do it?

Gerald Versluis: Well, a little bit. Little bit. Not thanks to you, but it's fine (laughter).

David Ortinau: We're done. Is this cool? Everybody enjoy this? (applause) Let me just -- I'll put it on the very last slide here. There are some resources, take a picture of that, resources, everybody has got pictures of that. I'm going to click it in five, four, three, three-and-a-half, somebody just AirDrop it to him (laughter). Alright, and then there's our, yes, come to.NET Conf. No, wait, don't come, watch it. All right, thanks, everybody. :

[ Music ]

END