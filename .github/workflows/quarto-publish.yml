name: Render and Deploy Quarto Site to GitHub Pages

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: self-hosted
    # runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        lfs: true
        lfs-include: |
          docs/**/*.png
          docs/**/*.jpg
          docs/**/*.jpeg
          docs/**/*.gif
          assets/**/*.png
          assets/**/*.jpg
          *.png
          *.jpg
          *.jpeg
        # Exclude large files not needed for build
        lfs-exclude: |
          **/*.mp4
          **/*.avi
          **/*.mov
          **/*.zip
          **/*.exe
          **/*.msi
          **/*.pdf  

    - name: Setup Quarto
      uses: quarto-dev/quarto-actions/setup@v2
      with:
        version: pre-release
        
    - name: Check for Python requirements
      id: check-python
      shell: pwsh
      run: |
        if ((Test-Path "requirements.txt") -or (Test-Path "pyproject.toml")) {
          echo "python-needed=true" >> $env:GITHUB_OUTPUT
        } else {
          echo "python-needed=false" >> $env:GITHUB_OUTPUT
        }
        
    - name: Setup Python (if needed for computations)
      if: steps.check-python.outputs.python-needed == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install Python dependencies (if needed)
      if: steps.check-python.outputs.python-needed == 'true'
      shell: pwsh
      run: |
        if (Test-Path "requirements.txt") {
          pip install -r requirements.txt
        } elseif (Test-Path "pyproject.toml") {
          pip install -e .
        }
        
    - name: Setup R (if needed for computations)
      uses: r-lib/actions/setup-r@v2
      if: false  # Set to true if you use R
      with:
        r-version: '4.3.0'

    - name: Install yq for YAML processing
      shell: pwsh
      run: |
        # Download and install yq for Windows
        $yqVersion = "v4.40.5"  # Use a specific version for reliability
        $yqUrl = "https://github.com/mikefarah/yq/releases/download/$yqVersion/yq_windows_amd64.exe"
        
        Write-Host "Downloading yq from $yqUrl"
        Invoke-WebRequest -Uri $yqUrl -OutFile "yq.exe"
        
        # Verify download
        if (Test-Path "yq.exe") {
          Write-Host "yq downloaded successfully"
          .\yq.exe --version
        } else {
          Write-Error "Failed to download yq"
          exit 1
        }

    - name: Extract navigation structure to JSON
      shell: pwsh
      run: |
        # Extract sidebar structure from _quarto.yml and convert to JSON
        Write-Host "Extracting sidebar structure from _quarto.yml..."
        
        if (Test-Path "_quarto.yml") {
          .\yq.exe '.website.sidebar' _quarto.yml | Out-File -FilePath "navigation.json" -Encoding utf8
          Write-Host "Generated navigation.json:"
          Get-Content "navigation.json"
        } else {
          Write-Host "_quarto.yml not found, creating empty navigation.json"
          '{}' | Out-File -FilePath "navigation.json" -Encoding utf8
        }
        
    - name: Render Quarto Project
      shell: pwsh
      run: quarto render

    - name: Copy navigation data to published site
      shell: pwsh
      run: |
        # Copy navigation.json to the published site for client-side navigation
        if (Test-Path "navigation.json") {
          if (-not (Test-Path "docs")) {
            New-Item -ItemType Directory -Path "docs" -Force
          }
          Copy-Item "navigation.json" "docs/navigation.json" -Force
          Write-Host "Copied navigation.json to docs/navigation.json"
          Get-ChildItem "docs/navigation.json" -Force
        } else {
          Write-Warning "navigation.json not found, skipping copy"
        }
      
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs/

  deploy:
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
